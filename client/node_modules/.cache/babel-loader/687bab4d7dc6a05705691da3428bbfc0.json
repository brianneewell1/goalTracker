{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\brian\\\\Desktop\\\\bookActivity\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\brian\\\\Desktop\\\\bookActivity\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\brian\\\\Desktop\\\\bookActivity\\\\client\\\\src\\\\pages\\\\Goals.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Goals() {\n  // Setting our component's initial state\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        Goals = _useState2[0],\n        setGoals = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formObject = _useState4[0],\n        setFormObject = _useState4[1]; // Load all Goals and store them with setGoals\n\n\n  useEffect(() => {\n    loadGoals();\n  }, []); // Loads all Goals and sets them to Goals\n\n  function loadGoals() {\n    API.getGoals().then(res => setGoals(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a Goal from the database with a given id, then reloads Goals from the db\n\n  function deleteGoal(id) {\n    API.deleteGoal(id).then(res => loadGoals()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // When the form is submitted, use the API.saveGoal method to save the goal data\n  // Then reload goals from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    API.saveGoal({\n      title: formObject.title,\n      measurement: formObject.measurement,\n      duration: formObject.duration,\n      notes: formObject.notes\n    }).then(res => loadGoals()).catch(err => console.log(err));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Set New Goal\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"Goal Title\",\n    placeholder: \"Run 1 mile (Title required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"Measurement\",\n    placeholder: \"3 times a week (Measurement required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"Duration\",\n    placeholder: \"For a Month(Duration required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"Additional Notes\",\n    placeholder: \"I plan on running MWF at 7:00am (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \"Add Goal\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"My Goals\")), Goals.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, Goals.map(goal => /*#__PURE__*/React.createElement(ListItem, {\n    key: goal._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/goals/\" + goal._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }\n  }, goal.title, \" for \", goal.measurement, \" for \", goal.duration)), /*#__PURE__*/React.createElement(DeleteBtn, {\n    onClick: () => deleteGoal(goal._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  })))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"No Current Goals\"))));\n}\n\nexport default Goals;","map":{"version":3,"sources":["C:/Users/brian/Desktop/bookActivity/client/src/pages/Goals.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Goals","setGoals","formObject","setFormObject","loadGoals","getGoals","then","res","data","catch","err","console","log","deleteGoal","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveGoal","title","measurement","duration","notes","length","map","goal","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nfunction Goals() {\r\n  // Setting our component's initial state\r\n  const [Goals, setGoals] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n\r\n  // Load all Goals and store them with setGoals\r\n  useEffect(() => {\r\n    loadGoals()\r\n  }, [])\r\n\r\n  // Loads all Goals and sets them to Goals\r\n  function loadGoals() {\r\n    API.getGoals()\r\n      .then(res => \r\n        setGoals(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a Goal from the database with a given id, then reloads Goals from the db\r\n  function deleteGoal(id) {\r\n    API.deleteGoal(id)\r\n      .then(res => loadGoals())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // Handles updating component state when the user types into the input field\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveGoal method to save the goal data\r\n  // Then reload goals from the database\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    API.saveGoal({\r\n        title: formObject.title,\r\n        measurement: formObject.measurement,\r\n        duration: formObject.duration,\r\n        notes: formObject.notes\r\n      })\r\n        .then(res => loadGoals())\r\n        .catch(err => console.log(err));\r\n  };\r\n\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-6\">\r\n            <Jumbotron>\r\n              <h1>Set New Goal</h1>\r\n            </Jumbotron>\r\n            <form>\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"Goal Title\"\r\n                placeholder=\"Run 1 mile (Title required)\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"Measurement\"\r\n                placeholder=\"3 times a week (Measurement required)\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"Duration\"\r\n                placeholder=\"For a Month(Duration required)\"\r\n              />\r\n              <TextArea\r\n                onChange={handleInputChange}\r\n                name=\"Additional Notes\"\r\n                placeholder=\"I plan on running MWF at 7:00am (Optional)\"\r\n              />\r\n              <FormBtn\r\n                onClick={handleFormSubmit}\r\n              >\r\n                Add Goal\r\n              </FormBtn>\r\n            </form>\r\n          </Col>\r\n          <Col size=\"md-6 sm-12\">\r\n            <Jumbotron>\r\n              <h1>My Goals</h1>\r\n            </Jumbotron>\r\n            {Goals.length ? (\r\n              <List>\r\n                {Goals.map(goal => (\r\n                  <ListItem key={goal._id}>\r\n                    <Link to={\"/goals/\" + goal._id}>\r\n                      <strong>\r\n                        {goal.title} for {goal.measurement} for {goal.duration}\r\n                      </strong>\r\n                    </Link>\r\n                    <DeleteBtn onClick={() => deleteGoal(goal._id)} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            ) : (\r\n              <h3>No Current Goals</h3>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\nexport default Goals;\r\n"]},"metadata":{},"sourceType":"module"}